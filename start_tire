#!/bin/python3
import configparser
import argparse
from argparse import RawTextHelpFormatter
import os
import io

EXIT_NO_CONFIG=1
DEFAULT_SNOWSQL_CONFIG=os.path.expanduser("~/.snowsql/config")

arguments_parser = argparse.ArgumentParser(description="Mobilize.Net SnowTire. This is fork of the original SnowTire, to provide a Quick Jump to using SnowFlake for DataScience",formatter_class=RawTextHelpFormatter)
arguments_parser.add_argument('--config',help='Specifies the location for the SnowSQL configuration file')
arguments_parser.add_argument('-a','--accountname', help='Specifies your account identifier.')
arguments_parser.add_argument('-u','--username', help='Specifies the login name of the user with whom you connect to the specified account.')
arguments_parser.add_argument('-p' ,'--password', help='Specifies the password to use')
arguments_parser.add_argument('-d' ,'--dbname', help='Specifies the database to use')
arguments_parser.add_argument('-s' ,'--schemaname', help='Specifies the database schema to use')
arguments_parser.add_argument('-r','--rolename', help='Specifies the role to use')
arguments_parser.add_argument('-w','--warehouse', help='Specifies the virtual warehouse to use ')
arguments_parser.add_argument('-c','--connection', help='Specifies a connection to use, where the specified string is the name of a connection defined in the SnowSQL configuration file')


sf_account   = None
sf_username  = None
sf_dbname    = None
sf_password  = None
sf_rolename  = None
sf_warehouse = None


arguments = arguments_parser.parse_args()


def readsection(configsection):
    global sf_account
    global sf_username
    global sf_dbname
    global sf_password
    global sf_rolename
    global sf_warehouse
    sf_account   = configsection['accountname']   if 'accountname'   in configsection else sf_account 
    sf_username  = configsection['username']      if 'username'      in configsection else sf_username 
    sf_dbname    = configsection['dbname']        if 'dbname'        in configsection else sf_dbname 
    sf_password  = configsection['password']      if 'password'      in configsection else sf_password 
    sf_rolename  = configsection['rolename']      if 'rolename'      in configsection else sf_rolename 
    sf_warehouse = configsection['warehousename'] if 'warehousename' in configsection else sf_warehouse 

def readconfig():
    global arguments
    configfilename = arguments.config if arguments.config else (DEFAULT_SNOWSQL_CONFIG if os.path.exists(DEFAULT_SNOWSQL_CONFIG) else None)
    if configfilename:
        if not os.path.exists(configfilename):
            print(f"Sorry, config file {configfilename} does not exist")
            exit(EXIT_NO_CONFIG)
        config = configparser.ConfigParser()
        ## Config parser is not good reading comments
        lines = open(configfilename,"r").readlines()
        config_content = "".join([x for x in lines if not x.strip().startswith("#")])
        buf = io.StringIO(config_content)
        config.read_file(buf)
        if not arguments.connection and 'connections' in config:
            return readsection(config['connections'])
        if arguments.connection and f'connections.{arguments.connection}' in config:
            return readsection(config[f'connections.{arguments.connection}'])
        print("No information was read from configfile")


def readargs():
    global sf_account
    global sf_username
    global sf_dbname
    global sf_password
    global sf_rolename
    global sf_warehouse
    sf_account   = arguments.accountname if arguments.accountname else sf_account
    sf_username  = arguments.username    if arguments.username    else sf_username
    sf_dbname    = arguments.dbname      if arguments.dbname      else sf_dbname
    sf_password  = arguments.password    if arguments.password    else sf_password
    sf_rolename  = arguments.rolename    if arguments.rolename    else sf_rolename
    sf_warehouse = arguments.warehouse   if arguments.warehouse   else sf_warehouse

def read_env():
    global sf_account
    global sf_username
    global sf_dbname
    global sf_password
    global sf_rolename
    global sf_warehouse
    sf_account   = os.getenv('SNOW_ACCOUNT')    if os.getenv('SNOW_ACCOUNT')   else (os.getenv('SNOWSQL_ACCOUNT')   if os.getenv('SNOWSQL_ACCOUNT')    else sf_account)
    sf_username  = os.getenv('SNOW_USER')       if os.getenv('SNOW_USER')      else (os.getenv('SNOWSQL_USER')      if os.getenv('SNOWSQL_USER')       else sf_username)
    sf_dbname    = os.getenv('SNOW_DATABASE')   if os.getenv('SNOW_DATABASE')  else (os.getenv('SNOWSQL_DATABASE')  if os.getenv('SNOWSQL_DATABASE')   else sf_dbname)
    sf_password  = os.getenv('SNOW_PASSWORD')   if os.getenv('SNOW_PASSWORD')  else (os.getenv('SNOWSQL_PWD')       if os.getenv('SNOWSQL_PWD')   else sf_password)
    sf_rolename  = os.getenv('SNOW_ROLE')       if os.getenv('SNOW_ROLE')      else (os.getenv('SNOWSQL_ROLE')      if os.getenv('SNOWSQL_ROLE')       else sf_rolename)
    sf_warehouse = os.getenv('SNOW_WAREHOUSE')  if os.getenv('SNOW_WAREHOUSE') else (os.getenv('SNOWSQL_WAREHOUSE') if os.getenv('SNOWSQL_WAREHOUSE') else sf_warehouse)

def get_params():
    global sf_account
    global sf_username
    global sf_dbname
    global sf_password
    global sf_rolename
    global sf_warehouse
    res = ""
    if sf_account:
        res = res + f" -e SNOW_ACCOUNT={sf_account} "
    if sf_username:
        res = res + f" -e SNOW_USER={sf_username} "
    if sf_dbname:
        res = res + f" -e SNOW_DATABASE={sf_dbname} "
    if sf_password:
        res = res + f" -e SNOW_PASSWORD={sf_password} "
    if sf_rolename:
        res = res + f" -e SNOW_ROLE={sf_rolename} "
    if sf_warehouse:
        res = res + f" -e SNOW_WAREHOUSE={sf_warehouse}"
    return res

readconfig()
readargs()
read_env()
documents_folder = os.path.expanduser(f"~{os.path.sep}Documents") 

os.system("docker rm spare-0")
os.system(f"docker run -e JUPYTER_TOKEN=easy {get_params()} -v {documents_folder}:/home/jovyan/work -p 8888:8888 --name spare-0 orellabac/snowtire:latest")

